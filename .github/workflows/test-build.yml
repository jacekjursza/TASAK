name: Test Build Binaries

on:
  push:
    branches: [ fix/binary-builds ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: tasak-linux-x64
            pyinstaller_args: --onefile
          - os: windows-latest
            artifact_name: tasak-windows-x64.exe
            pyinstaller_args: --onefile --console
          - os: macos-latest
            artifact_name: tasak-macos-x64
            pyinstaller_args: --onefile
          - os: macos-13
            artifact_name: tasak-macos-intel
            pyinstaller_args: --onefile

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[mcp]
          pip install pyinstaller

      - name: Build with PyInstaller (Unix)
        if: runner.os != 'Windows'
        run: |
          pyinstaller ${{ matrix.pyinstaller_args }} \
            --name tasak \
            --hidden-import tasak \
            --hidden-import yaml \
            --hidden-import mcp \
            --collect-all tasak \
            --distpath dist \
            --workpath build \
            --specpath build \
            tasak/main.py

      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          pyinstaller ${{ matrix.pyinstaller_args }} --name tasak --hidden-import tasak --hidden-import yaml --hidden-import mcp --collect-all tasak --distpath dist --workpath build --specpath build tasak/main.py

      - name: Rename binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mv dist/tasak dist/${{ matrix.artifact_name }}
          chmod +x dist/${{ matrix.artifact_name }}

      - name: Rename binary (Windows)
        if: runner.os == 'Windows'
        run: |
          Move-Item -Path "dist\tasak.exe" -Destination "dist\${{ matrix.artifact_name }}"

      - name: Test binary (Unix)
        if: runner.os != 'Windows'
        run: |
          dist/${{ matrix.artifact_name }} --version

      - name: Test binary (Windows)
        if: runner.os == 'Windows'
        run: |
          dist\${{ matrix.artifact_name }} --version

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}

  create-universal-macos:
    name: Create Universal macOS Binary
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download Intel binary
        uses: actions/download-artifact@v4
        with:
          name: tasak-macos-intel
          path: ./intel

      - name: Download ARM binary
        uses: actions/download-artifact@v4
        with:
          name: tasak-macos-x64
          path: ./arm

      - name: Create universal binary
        run: |
          lipo -create -output tasak-macos-universal ./intel/tasak-macos-intel ./arm/tasak-macos-x64
          chmod +x tasak-macos-universal

      - name: Upload universal binary
        uses: actions/upload-artifact@v4
        with:
          name: tasak-macos-universal
          path: tasak-macos-universal

  test-attach:
    name: Test Attach Binaries
    needs: [build, create-universal-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./binaries

      - name: Display structure
        run: |
          echo "=== Top level structure ==="
          ls -la ./binaries/
          echo "=== Content of each artifact folder ==="
          for dir in ./binaries/*/; do
            echo "Content of $dir:"
            ls -la "$dir"
          done

      - name: Prepare binaries
        run: |
          mkdir -p final-binaries
          for dir in binaries/*/; do
            if [ -d "$dir" ]; then
              echo "Processing $dir"
              # Move files from subdirectories to final-binaries
              find "$dir" -type f -exec mv {} final-binaries/ \;
            fi
          done
          echo "=== Final binaries ==="
          ls -la final-binaries/

      - name: Create checksums
        run: |
          cd final-binaries
          for file in *; do
            if [ -f "$file" ]; then
              echo "Creating checksum for $file"
              sha256sum "$file" > "$file.sha256"
            fi
          done
          echo "=== Files with checksums ==="
          ls -la
